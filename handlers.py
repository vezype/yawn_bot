from loader import dp
from aiogram import types
from loader import db
import time


@dp.message_handler(commands=['reg'], chat_type=types.ChatType.GROUP)
async def start(message: types.Message):
    if not db.user_exists(message.from_user.id):
        await message.reply(f'–î–æ–∫–ª–∞–¥—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–º –ê–º–µ—Ä–∏–∫–∏, –ø–æ—Å—Ç–∞–≤–∏–ª —Ç–µ–±—è –Ω–∞ —É—á—ë—Ç –ø–æ –∑–µ–≤–∫–∞–º.')
        db.add_user(message.from_user.id)
    else:
        await message.reply(f'–ö–∞–∂–µ—Ç—Å—è —É —Ç–µ–±—è –∏–∑ –≥–æ–ª–æ–≤—ã –≤—ã–ª–µ—Ç–µ–ª —Ç–æ—Ç —Ñ–∞–∫—Ç, —á—Ç–æ —Ç—ã  —É–∂–µ —Å—Ç–æ–∏—à—å –Ω–∞ —É—á—ë—Ç–µ.\n\n'
                            f'*/stats* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–µ–≤–∫–æ–≤.', parse_mode=types.ParseMode.MARKDOWN)


@dp.message_handler(content_types=types.ContentTypes.STICKER, chat_type=types.ChatType.GROUP)
async def get_sticker(message: types.Message):
    if db.user_exists(message.from_user.id) and message.sticker.emoji == 'üòÆ':
        date = time.strftime('%d.%m.%y | %H:%M:%S')
        await message.reply(f'–ó–∞–ø–∏—Å–∞–ª!\n\n'
                            f'*–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {date}.*', parse_mode=types.ParseMode.MARKDOWN)
        db.new_date(message.from_user.id, date)


@dp.message_handler(commands=['stats'], chat_type=types.ChatType.GROUP)
async def stats(message: types.Message):
    if db.user_exists(message.from_user.id):
        dates = db.get_dates(message.from_user.id)

        await message.reply(f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–µ–≤–∫–æ–≤: *{len(dates)}*.', parse_mode=types.ParseMode.MARKDOWN)

        yawns_stats = {}
        for date in dates:
            x, y = date.split(' | ')
            if x not in yawns_stats.keys():
                yawns_stats[x] = [y]
            else:
                yawns_stats[x].append(y)
        for x, y in yawns_stats.items():
            text = f'*{x}*:\n\n'
            for z in y:
                text += f'{z}\n'
            text += f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–µ–≤–∫–æ–≤ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å: *{len(y)}*.'

            try:
                await message.answer(text, parse_mode=types.ParseMode.MARKDOWN)
            except:
                await message.answer(f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–µ–≤–∫–æ–≤ –∑–∞ *{x}*: *{y}*.', parse_mode=types.ParseMode.MARKDOWN)


@dp.message_handler(chat_type=types.ChatType.PRIVATE)
async def echo(message: types.Message):
    await message.answer('–†–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ —è –Ω–∞—á–Ω—É –≤–µ—Å—Ç–∏ —É—á—ë—Ç –í–∞—à–∏—Ö –∑–µ–≤–∫–æ–≤.\n\n'
                         '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å */reg* –≤ —á–∞—Ç–µ.', parse_mode=types.ParseMode.MARKDOWN)
